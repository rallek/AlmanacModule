<?php
/**
 * Almanac.
 *
 * @copyright Ralf Koester (RK)
 * @license http://www.gnu.org/licenses/lgpl.html GNU Lesser General Public License
 * @author Ralf Koester <ralf@familie-koester.de>.
 * @link http://k62.de
 * @link http://zikula.org
 * @version Generated by ModuleStudio (https://modulestudio.de).
 */

namespace RK\AlmanacModule\Base;

use Symfony\Component\Validator\Constraints as Assert;
use Zikula\ExtensionsModule\Api\ApiInterface\VariableApiInterface;
use Zikula\GroupsModule\Constant as GroupsConstant;
use Zikula\GroupsModule\Entity\RepositoryInterface\GroupRepositoryInterface;
use RK\AlmanacModule\Validator\Constraints as AlmanacAssert;

/**
 * Application settings class for handling module variables.
 */
abstract class AbstractAppSettings
{
    /**
     * @var VariableApiInterface
     */
    protected $variableApi;
    
    /**
     * @var GroupRepositoryInterface
     */
    protected $groupRepository;
    
    /**
     * Used to determine moderator user accounts for sending email notifications.
     *
     * @Assert\NotBlank()
     * @var integer $moderationGroupForDates
     */
    protected $moderationGroupForDates = 2;
    
    /**
     * The amount of dates shown per page
     *
     * @Assert\Type(type="integer")
     * @Assert\NotBlank()
     * @Assert\NotEqualTo(value=0)
     * @Assert\LessThan(value=100000000000)
     * @var integer $dateEntriesPerPage
     */
    protected $dateEntriesPerPage = 10;
    
    /**
     * Whether to add a link to dates of the current user on his account page
     *
     * @Assert\NotNull()
     * @Assert\Type(type="bool")
     * @var boolean $linkOwnDatesOnAccountPage
     */
    protected $linkOwnDatesOnAccountPage = true;
    
    /**
     * Whether to enable shrinking huge images to maximum dimensions. Stores downscaled version of the original image.
     *
     * @Assert\NotNull()
     * @Assert\Type(type="bool")
     * @var boolean $enableShrinkingForDateDateImage
     */
    protected $enableShrinkingForDateDateImage = false;
    
    /**
     * The maximum image width in pixels.
     *
     * @Assert\Type(type="integer")
     * @Assert\NotBlank()
     * @Assert\NotEqualTo(value=0)
     * @Assert\LessThan(value=100000000000)
     * @var integer $shrinkWidthDateDateImage
     */
    protected $shrinkWidthDateDateImage = 800;
    
    /**
     * The maximum image height in pixels.
     *
     * @Assert\Type(type="integer")
     * @Assert\NotBlank()
     * @Assert\NotEqualTo(value=0)
     * @Assert\LessThan(value=100000000000)
     * @var integer $shrinkHeightDateDateImage
     */
    protected $shrinkHeightDateDateImage = 600;
    
    /**
     * Thumbnail mode (inset or outbound).
     *
     * @Assert\NotBlank()
     * @AlmanacAssert\ListEntry(entityName="appSettings", propertyName="thumbnailModeDateDateImage", multiple=false)
     * @var string $thumbnailModeDateDateImage
     */
    protected $thumbnailModeDateDateImage = 'inset';
    
    /**
     * Thumbnail width on view pages in pixels.
     *
     * @Assert\Type(type="integer")
     * @Assert\NotBlank()
     * @Assert\NotEqualTo(value=0)
     * @Assert\LessThan(value=100000000000)
     * @var integer $thumbnailWidthDateDateImageView
     */
    protected $thumbnailWidthDateDateImageView = 32;
    
    /**
     * Thumbnail height on view pages in pixels.
     *
     * @Assert\Type(type="integer")
     * @Assert\NotBlank()
     * @Assert\NotEqualTo(value=0)
     * @Assert\LessThan(value=100000000000)
     * @var integer $thumbnailHeightDateDateImageView
     */
    protected $thumbnailHeightDateDateImageView = 24;
    
    /**
     * Thumbnail width on display pages in pixels.
     *
     * @Assert\Type(type="integer")
     * @Assert\NotBlank()
     * @Assert\NotEqualTo(value=0)
     * @Assert\LessThan(value=100000000000)
     * @var integer $thumbnailWidthDateDateImageDisplay
     */
    protected $thumbnailWidthDateDateImageDisplay = 240;
    
    /**
     * Thumbnail height on display pages in pixels.
     *
     * @Assert\Type(type="integer")
     * @Assert\NotBlank()
     * @Assert\NotEqualTo(value=0)
     * @Assert\LessThan(value=100000000000)
     * @var integer $thumbnailHeightDateDateImageDisplay
     */
    protected $thumbnailHeightDateDateImageDisplay = 180;
    
    /**
     * Thumbnail width on edit pages in pixels.
     *
     * @Assert\Type(type="integer")
     * @Assert\NotBlank()
     * @Assert\NotEqualTo(value=0)
     * @Assert\LessThan(value=100000000000)
     * @var integer $thumbnailWidthDateDateImageEdit
     */
    protected $thumbnailWidthDateDateImageEdit = 240;
    
    /**
     * Thumbnail height on edit pages in pixels.
     *
     * @Assert\Type(type="integer")
     * @Assert\NotBlank()
     * @Assert\NotEqualTo(value=0)
     * @Assert\LessThan(value=100000000000)
     * @var integer $thumbnailHeightDateDateImageEdit
     */
    protected $thumbnailHeightDateDateImageEdit = 180;
    
    /**
     * Which sections are supported in the Finder component (used by Scribite plug-ins).
     *
     * @Assert\NotNull()
     * @AlmanacAssert\ListEntry(entityName="appSettings", propertyName="enabledFinderTypes", multiple=true)
     * @var string $enabledFinderTypes
     */
    protected $enabledFinderTypes = 'date';
    
    
    /**
     * AppSettings constructor.
     *
     * @param VariableApiInterface $variableApi VariableApi service instance
     * @param GroupRepositoryInterface $groupRepository GroupRepository service instance
     */
    public function __construct(
        VariableApiInterface $variableApi,
        GroupRepositoryInterface $groupRepository
    ) {
        $this->variableApi = $variableApi;
        $this->groupRepository = $groupRepository;
    
        $this->load();
    }
    
    /**
     * Returns the moderation group for dates.
     *
     * @return integer
     */
    public function getModerationGroupForDates()
    {
        return $this->moderationGroupForDates;
    }
    
    /**
     * Sets the moderation group for dates.
     *
     * @param integer $moderationGroupForDates
     *
     * @return void
     */
    public function setModerationGroupForDates($moderationGroupForDates)
    {
        if ($this->moderationGroupForDates !== $moderationGroupForDates) {
            $this->moderationGroupForDates = $moderationGroupForDates;
        }
    }
    
    /**
     * Returns the date entries per page.
     *
     * @return integer
     */
    public function getDateEntriesPerPage()
    {
        return $this->dateEntriesPerPage;
    }
    
    /**
     * Sets the date entries per page.
     *
     * @param integer $dateEntriesPerPage
     *
     * @return void
     */
    public function setDateEntriesPerPage($dateEntriesPerPage)
    {
        if (intval($this->dateEntriesPerPage) !== intval($dateEntriesPerPage)) {
            $this->dateEntriesPerPage = intval($dateEntriesPerPage);
        }
    }
    
    /**
     * Returns the link own dates on account page.
     *
     * @return boolean
     */
    public function getLinkOwnDatesOnAccountPage()
    {
        return $this->linkOwnDatesOnAccountPage;
    }
    
    /**
     * Sets the link own dates on account page.
     *
     * @param boolean $linkOwnDatesOnAccountPage
     *
     * @return void
     */
    public function setLinkOwnDatesOnAccountPage($linkOwnDatesOnAccountPage)
    {
        if (boolval($this->linkOwnDatesOnAccountPage) !== boolval($linkOwnDatesOnAccountPage)) {
            $this->linkOwnDatesOnAccountPage = boolval($linkOwnDatesOnAccountPage);
        }
    }
    
    /**
     * Returns the enable shrinking for date date image.
     *
     * @return boolean
     */
    public function getEnableShrinkingForDateDateImage()
    {
        return $this->enableShrinkingForDateDateImage;
    }
    
    /**
     * Sets the enable shrinking for date date image.
     *
     * @param boolean $enableShrinkingForDateDateImage
     *
     * @return void
     */
    public function setEnableShrinkingForDateDateImage($enableShrinkingForDateDateImage)
    {
        if (boolval($this->enableShrinkingForDateDateImage) !== boolval($enableShrinkingForDateDateImage)) {
            $this->enableShrinkingForDateDateImage = boolval($enableShrinkingForDateDateImage);
        }
    }
    
    /**
     * Returns the shrink width date date image.
     *
     * @return integer
     */
    public function getShrinkWidthDateDateImage()
    {
        return $this->shrinkWidthDateDateImage;
    }
    
    /**
     * Sets the shrink width date date image.
     *
     * @param integer $shrinkWidthDateDateImage
     *
     * @return void
     */
    public function setShrinkWidthDateDateImage($shrinkWidthDateDateImage)
    {
        if (intval($this->shrinkWidthDateDateImage) !== intval($shrinkWidthDateDateImage)) {
            $this->shrinkWidthDateDateImage = intval($shrinkWidthDateDateImage);
        }
    }
    
    /**
     * Returns the shrink height date date image.
     *
     * @return integer
     */
    public function getShrinkHeightDateDateImage()
    {
        return $this->shrinkHeightDateDateImage;
    }
    
    /**
     * Sets the shrink height date date image.
     *
     * @param integer $shrinkHeightDateDateImage
     *
     * @return void
     */
    public function setShrinkHeightDateDateImage($shrinkHeightDateDateImage)
    {
        if (intval($this->shrinkHeightDateDateImage) !== intval($shrinkHeightDateDateImage)) {
            $this->shrinkHeightDateDateImage = intval($shrinkHeightDateDateImage);
        }
    }
    
    /**
     * Returns the thumbnail mode date date image.
     *
     * @return string
     */
    public function getThumbnailModeDateDateImage()
    {
        return $this->thumbnailModeDateDateImage;
    }
    
    /**
     * Sets the thumbnail mode date date image.
     *
     * @param string $thumbnailModeDateDateImage
     *
     * @return void
     */
    public function setThumbnailModeDateDateImage($thumbnailModeDateDateImage)
    {
        if ($this->thumbnailModeDateDateImage !== $thumbnailModeDateDateImage) {
            $this->thumbnailModeDateDateImage = isset($thumbnailModeDateDateImage) ? $thumbnailModeDateDateImage : '';
        }
    }
    
    /**
     * Returns the thumbnail width date date image view.
     *
     * @return integer
     */
    public function getThumbnailWidthDateDateImageView()
    {
        return $this->thumbnailWidthDateDateImageView;
    }
    
    /**
     * Sets the thumbnail width date date image view.
     *
     * @param integer $thumbnailWidthDateDateImageView
     *
     * @return void
     */
    public function setThumbnailWidthDateDateImageView($thumbnailWidthDateDateImageView)
    {
        if (intval($this->thumbnailWidthDateDateImageView) !== intval($thumbnailWidthDateDateImageView)) {
            $this->thumbnailWidthDateDateImageView = intval($thumbnailWidthDateDateImageView);
        }
    }
    
    /**
     * Returns the thumbnail height date date image view.
     *
     * @return integer
     */
    public function getThumbnailHeightDateDateImageView()
    {
        return $this->thumbnailHeightDateDateImageView;
    }
    
    /**
     * Sets the thumbnail height date date image view.
     *
     * @param integer $thumbnailHeightDateDateImageView
     *
     * @return void
     */
    public function setThumbnailHeightDateDateImageView($thumbnailHeightDateDateImageView)
    {
        if (intval($this->thumbnailHeightDateDateImageView) !== intval($thumbnailHeightDateDateImageView)) {
            $this->thumbnailHeightDateDateImageView = intval($thumbnailHeightDateDateImageView);
        }
    }
    
    /**
     * Returns the thumbnail width date date image display.
     *
     * @return integer
     */
    public function getThumbnailWidthDateDateImageDisplay()
    {
        return $this->thumbnailWidthDateDateImageDisplay;
    }
    
    /**
     * Sets the thumbnail width date date image display.
     *
     * @param integer $thumbnailWidthDateDateImageDisplay
     *
     * @return void
     */
    public function setThumbnailWidthDateDateImageDisplay($thumbnailWidthDateDateImageDisplay)
    {
        if (intval($this->thumbnailWidthDateDateImageDisplay) !== intval($thumbnailWidthDateDateImageDisplay)) {
            $this->thumbnailWidthDateDateImageDisplay = intval($thumbnailWidthDateDateImageDisplay);
        }
    }
    
    /**
     * Returns the thumbnail height date date image display.
     *
     * @return integer
     */
    public function getThumbnailHeightDateDateImageDisplay()
    {
        return $this->thumbnailHeightDateDateImageDisplay;
    }
    
    /**
     * Sets the thumbnail height date date image display.
     *
     * @param integer $thumbnailHeightDateDateImageDisplay
     *
     * @return void
     */
    public function setThumbnailHeightDateDateImageDisplay($thumbnailHeightDateDateImageDisplay)
    {
        if (intval($this->thumbnailHeightDateDateImageDisplay) !== intval($thumbnailHeightDateDateImageDisplay)) {
            $this->thumbnailHeightDateDateImageDisplay = intval($thumbnailHeightDateDateImageDisplay);
        }
    }
    
    /**
     * Returns the thumbnail width date date image edit.
     *
     * @return integer
     */
    public function getThumbnailWidthDateDateImageEdit()
    {
        return $this->thumbnailWidthDateDateImageEdit;
    }
    
    /**
     * Sets the thumbnail width date date image edit.
     *
     * @param integer $thumbnailWidthDateDateImageEdit
     *
     * @return void
     */
    public function setThumbnailWidthDateDateImageEdit($thumbnailWidthDateDateImageEdit)
    {
        if (intval($this->thumbnailWidthDateDateImageEdit) !== intval($thumbnailWidthDateDateImageEdit)) {
            $this->thumbnailWidthDateDateImageEdit = intval($thumbnailWidthDateDateImageEdit);
        }
    }
    
    /**
     * Returns the thumbnail height date date image edit.
     *
     * @return integer
     */
    public function getThumbnailHeightDateDateImageEdit()
    {
        return $this->thumbnailHeightDateDateImageEdit;
    }
    
    /**
     * Sets the thumbnail height date date image edit.
     *
     * @param integer $thumbnailHeightDateDateImageEdit
     *
     * @return void
     */
    public function setThumbnailHeightDateDateImageEdit($thumbnailHeightDateDateImageEdit)
    {
        if (intval($this->thumbnailHeightDateDateImageEdit) !== intval($thumbnailHeightDateDateImageEdit)) {
            $this->thumbnailHeightDateDateImageEdit = intval($thumbnailHeightDateDateImageEdit);
        }
    }
    
    /**
     * Returns the enabled finder types.
     *
     * @return string
     */
    public function getEnabledFinderTypes()
    {
        return $this->enabledFinderTypes;
    }
    
    /**
     * Sets the enabled finder types.
     *
     * @param string $enabledFinderTypes
     *
     * @return void
     */
    public function setEnabledFinderTypes($enabledFinderTypes)
    {
        if ($this->enabledFinderTypes !== $enabledFinderTypes) {
            $this->enabledFinderTypes = isset($enabledFinderTypes) ? $enabledFinderTypes : '';
        }
    }
    
    
    /**
     * Loads module variables from the database.
     */
    protected function load()
    {
        $moduleVars = $this->variableApi->getAll('RKAlmanacModule');
    
        if (isset($moduleVars['moderationGroupForDates'])) {
            $this->setModerationGroupForDates($moduleVars['moderationGroupForDates']);
        }
        if (isset($moduleVars['dateEntriesPerPage'])) {
            $this->setDateEntriesPerPage($moduleVars['dateEntriesPerPage']);
        }
        if (isset($moduleVars['linkOwnDatesOnAccountPage'])) {
            $this->setLinkOwnDatesOnAccountPage($moduleVars['linkOwnDatesOnAccountPage']);
        }
        if (isset($moduleVars['enableShrinkingForDateDateImage'])) {
            $this->setEnableShrinkingForDateDateImage($moduleVars['enableShrinkingForDateDateImage']);
        }
        if (isset($moduleVars['shrinkWidthDateDateImage'])) {
            $this->setShrinkWidthDateDateImage($moduleVars['shrinkWidthDateDateImage']);
        }
        if (isset($moduleVars['shrinkHeightDateDateImage'])) {
            $this->setShrinkHeightDateDateImage($moduleVars['shrinkHeightDateDateImage']);
        }
        if (isset($moduleVars['thumbnailModeDateDateImage'])) {
            $this->setThumbnailModeDateDateImage($moduleVars['thumbnailModeDateDateImage']);
        }
        if (isset($moduleVars['thumbnailWidthDateDateImageView'])) {
            $this->setThumbnailWidthDateDateImageView($moduleVars['thumbnailWidthDateDateImageView']);
        }
        if (isset($moduleVars['thumbnailHeightDateDateImageView'])) {
            $this->setThumbnailHeightDateDateImageView($moduleVars['thumbnailHeightDateDateImageView']);
        }
        if (isset($moduleVars['thumbnailWidthDateDateImageDisplay'])) {
            $this->setThumbnailWidthDateDateImageDisplay($moduleVars['thumbnailWidthDateDateImageDisplay']);
        }
        if (isset($moduleVars['thumbnailHeightDateDateImageDisplay'])) {
            $this->setThumbnailHeightDateDateImageDisplay($moduleVars['thumbnailHeightDateDateImageDisplay']);
        }
        if (isset($moduleVars['thumbnailWidthDateDateImageEdit'])) {
            $this->setThumbnailWidthDateDateImageEdit($moduleVars['thumbnailWidthDateDateImageEdit']);
        }
        if (isset($moduleVars['thumbnailHeightDateDateImageEdit'])) {
            $this->setThumbnailHeightDateDateImageEdit($moduleVars['thumbnailHeightDateDateImageEdit']);
        }
        if (isset($moduleVars['enabledFinderTypes'])) {
            $this->setEnabledFinderTypes($moduleVars['enabledFinderTypes']);
        }
    
        // prepare group selectors, fallback to admin group for undefined values
        $adminGroupId = GroupsConstant::GROUP_ID_ADMIN;
        $groupId = $this->getModerationGroupForDates();
        if ($groupId < 1) {
            $groupId = $adminGroupId;
        }
    
        $this->setModerationGroupForDates($this->groupRepository->find($groupId));
    }
    
    /**
     * Saves module variables into the database.
     */
    public function save()
    {
        // normalise group selector values
        $group = $this->getModerationGroupForDates();
        $group = is_object($group) ? $group->getGid() : intval($group);
        $this->setModerationGroupForDates($group);
    
        $this->variableApi->set('RKAlmanacModule', 'moderationGroupForDates', $this->getModerationGroupForDates());
        $this->variableApi->set('RKAlmanacModule', 'dateEntriesPerPage', $this->getDateEntriesPerPage());
        $this->variableApi->set('RKAlmanacModule', 'linkOwnDatesOnAccountPage', $this->getLinkOwnDatesOnAccountPage());
        $this->variableApi->set('RKAlmanacModule', 'enableShrinkingForDateDateImage', $this->getEnableShrinkingForDateDateImage());
        $this->variableApi->set('RKAlmanacModule', 'shrinkWidthDateDateImage', $this->getShrinkWidthDateDateImage());
        $this->variableApi->set('RKAlmanacModule', 'shrinkHeightDateDateImage', $this->getShrinkHeightDateDateImage());
        $this->variableApi->set('RKAlmanacModule', 'thumbnailModeDateDateImage', $this->getThumbnailModeDateDateImage());
        $this->variableApi->set('RKAlmanacModule', 'thumbnailWidthDateDateImageView', $this->getThumbnailWidthDateDateImageView());
        $this->variableApi->set('RKAlmanacModule', 'thumbnailHeightDateDateImageView', $this->getThumbnailHeightDateDateImageView());
        $this->variableApi->set('RKAlmanacModule', 'thumbnailWidthDateDateImageDisplay', $this->getThumbnailWidthDateDateImageDisplay());
        $this->variableApi->set('RKAlmanacModule', 'thumbnailHeightDateDateImageDisplay', $this->getThumbnailHeightDateDateImageDisplay());
        $this->variableApi->set('RKAlmanacModule', 'thumbnailWidthDateDateImageEdit', $this->getThumbnailWidthDateDateImageEdit());
        $this->variableApi->set('RKAlmanacModule', 'thumbnailHeightDateDateImageEdit', $this->getThumbnailHeightDateDateImageEdit());
        $this->variableApi->set('RKAlmanacModule', 'enabledFinderTypes', $this->getEnabledFinderTypes());
    }
}
